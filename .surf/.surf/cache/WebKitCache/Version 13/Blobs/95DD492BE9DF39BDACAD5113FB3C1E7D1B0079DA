<!DOCTYPE html>
<html class="client-nojs" lang="en" dir="ltr">
<head>
<meta charset="UTF-8"/>
<title>Unified Extensible Firmware Interface - ArchWiki</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Unified_Extensible_Firmware_Interface","wgTitle":"Unified Extensible Firmware Interface","wgCurRevisionId":559104,"wgRevisionId":559104,"wgArticleId":9549,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages or sections flagged with Template:Accuracy","Boot process"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Unified_Extensible_Firmware_Interface","wgRelevantArticleId":9549,"wgRequestId":"46fcb01edb997e6e8db0be74","wgIsProbablyEditable":false,"wgRelevantPageIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"UEFI","wgInternalRedirectTargetUrl":"/index.php/Unified_Extensible_Firmware_Interface"});mw.loader.state({"site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","site":"ready","user.options":"ready","user.tokens":"loading","zzz.ext.archLinux.styles":"ready","skins.vector.styles.responsive":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready"});mw.loader.implement("user.tokens@1pa52qv",function($,jQuery,require,module){/*@nomin*/mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
});mw.loader.load(["mediawiki.action.view.redirect","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","skins.vector.js"]);});</script>
<link rel="stylesheet" href="/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cskins.vector.styles.responsive%7Czzz.ext.archLinux.styles&amp;only=styles&amp;skin=vector"/>
<script async="" src="/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"/>
<meta name="generator" content="MediaWiki 1.31.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="ArchWiki (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="https://wiki.archlinux.org/api.php?action=rsd"/>
<link rel="license" href="http://www.gnu.org/copyleft/fdl.html"/>
<link rel="alternate" type="application/atom+xml" title="ArchWiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<link rel="canonical" href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface"/>
<!--[if lt IE 9]><script src="/load.php?debug=false&amp;lang=en&amp;modules=html5shiv&amp;only=scripts&amp;skin=vector&amp;sync=1"></script><![endif]-->
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Unified_Extensible_Firmware_Interface rootpage-Unified_Extensible_Firmware_Interface skin-vector action-view"><div id="archnavbar" class="noprint">
    <div id="archnavbarlogo">
        <p><a id="logo" href="https://www.archlinux.org/"></a></p>
    </div>
    <div id="archnavbarmenu">
        <ul id="archnavbarlist">
                        <li id="anb-home"><a href="https://www.archlinux.org/">Home</a></li>            <li id="anb-packages"><a href="https://www.archlinux.org/packages/">Packages</a></li>            <li id="anb-forums"><a href="https://bbs.archlinux.org/">Forums</a></li>            <li id="anb-wiki" class="anb-selected"><a href="https://wiki.archlinux.org/">Wiki</a></li>            <li id="anb-bugs"><a href="https://bugs.archlinux.org/">Bugs</a></li>            <li id="anb-security"><a href="https://security.archlinux.org/">Security</a></li>            <li id="anb-aur"><a href="https://aur.archlinux.org/">AUR</a></li>            <li id="anb-download"><a href="https://www.archlinux.org/download/">Download</a></li>        </ul>
    </div>
</div>
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div class="mw-indicators mw-body-content">
</div>
<h1 id="firstHeading" class="firstHeading" lang="en">Unified Extensible Firmware Interface</h1>			<div id="bodyContent" class="mw-body-content">
				<div id="siteSub" class="noprint">From ArchWiki</div>				<div id="contentSub"><span class="mw-redirectedfrom">(Redirected from <a href="/index.php?title=UEFI&amp;redirect=no" class="mw-redirect" title="UEFI">UEFI</a>)</span></div>
								<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-head">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="mw-parser-output"><div class="archwiki-template-meta-related-articles-start"><p>Related articles</p><ul>
<li><a href="/index.php/EFI_system_partition" title="EFI system partition">EFI system partition</a></li>
<li><a href="/index.php/Arch_boot_process" title="Arch boot process">Arch boot process</a></li>
<li><a href="/index.php/GUID_Partition_Table" class="mw-redirect" title="GUID Partition Table">GUID Partition Table</a></li>
<li><a href="/index.php/Secure_Boot" title="Secure Boot">Secure Boot</a></li>
</ul></div>
<div class="archwiki-template-box archwiki-template-box-warning"><strong>Warning:</strong> While the choice to install in UEFI mode is forward looking, early vendor UEFI implementations <i>may</i> carry more bugs than their BIOS counterparts. It is advised to do a search relating to your particular motherboard model before proceeding.</div>
<p>The <a rel="nofollow" class="external text" href="https://www.uefi.org/">Unified Extensible Firmware Interface</a> (UEFI or EFI for short) is a new model for the interface between operating systems and firmware. It provides a standard environment for booting an operating system and running pre-boot applications.
</p><p>It is distinct from the commonly used "<a href="/index.php/Partitioning#Master_Boot_Record_(bootstrap_code)" title="Partitioning">MBR boot code</a>" method followed for <a href="https://en.wikipedia.org/wiki/BIOS" class="extiw" title="wikipedia:BIOS">BIOS</a> systems. See <a href="/index.php/Arch_boot_process" title="Arch boot process">Arch boot process</a> for their differences and the boot process using UEFI. To set up UEFI boot loaders, see <a href="/index.php/Arch_boot_process#Boot_loader" title="Arch boot process">Arch boot process#Boot loader</a>.
</p>
<div id="toc" class="toc"><div class="toctitle" lang="en" dir="ltr"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#UEFI_versions"><span class="tocnumber">1</span> <span class="toctext">UEFI versions</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#UEFI_firmware_bitness"><span class="tocnumber">2</span> <span class="toctext">UEFI firmware bitness</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Checking_the_firmware_bitness"><span class="tocnumber">2.1</span> <span class="toctext">Checking the firmware bitness</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="#From_Linux"><span class="tocnumber">2.1.1</span> <span class="toctext">From Linux</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="#From_Mac_OS"><span class="tocnumber">2.1.2</span> <span class="toctext">From Mac OS</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="#From_Microsoft_Windows"><span class="tocnumber">2.1.3</span> <span class="toctext">From Microsoft Windows</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="#Linux_kernel_config_options_for_UEFI"><span class="tocnumber">3</span> <span class="toctext">Linux kernel config options for UEFI</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#UEFI_variables"><span class="tocnumber">4</span> <span class="toctext">UEFI variables</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="#UEFI_variables_support_in_Linux_kernel"><span class="tocnumber">4.1</span> <span class="toctext">UEFI variables support in Linux kernel</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Requirements_for_UEFI_variable_support"><span class="tocnumber">4.2</span> <span class="toctext">Requirements for UEFI variable support</span></a>
<ul>
<li class="toclevel-3 tocsection-11"><a href="#Mount_efivarfs"><span class="tocnumber">4.2.1</span> <span class="toctext">Mount efivarfs</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-12"><a href="#Userspace_tools"><span class="tocnumber">4.3</span> <span class="toctext">Userspace tools</span></a>
<ul>
<li class="toclevel-3 tocsection-13"><a href="#efibootmgr"><span class="tocnumber">4.3.1</span> <span class="toctext">efibootmgr</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-14"><a href="#UEFI_Shell"><span class="tocnumber">5</span> <span class="toctext">UEFI Shell</span></a>
<ul>
<li class="toclevel-2 tocsection-15"><a href="#Obtaining_UEFI_Shell"><span class="tocnumber">5.1</span> <span class="toctext">Obtaining UEFI Shell</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#Launching_UEFI_Shell"><span class="tocnumber">5.2</span> <span class="toctext">Launching UEFI Shell</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="#Important_UEFI_Shell_commands"><span class="tocnumber">5.3</span> <span class="toctext">Important UEFI Shell commands</span></a>
<ul>
<li class="toclevel-3 tocsection-18"><a href="#bcfg"><span class="tocnumber">5.3.1</span> <span class="toctext">bcfg</span></a></li>
<li class="toclevel-3 tocsection-19"><a href="#map"><span class="tocnumber">5.3.2</span> <span class="toctext">map</span></a></li>
<li class="toclevel-3 tocsection-20"><a href="#edit"><span class="tocnumber">5.3.3</span> <span class="toctext">edit</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-21"><a href="#UEFI_Bootable_Media"><span class="tocnumber">6</span> <span class="toctext">UEFI Bootable Media</span></a>
<ul>
<li class="toclevel-2 tocsection-22"><a href="#Create_UEFI_bootable_USB_from_ISO"><span class="tocnumber">6.1</span> <span class="toctext">Create UEFI bootable USB from ISO</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="#Remove_UEFI_boot_support_from_optical_media"><span class="tocnumber">6.2</span> <span class="toctext">Remove UEFI boot support from optical media</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="#Booting_64-bit_kernel_on_32-bit_UEFI"><span class="tocnumber">6.3</span> <span class="toctext">Booting 64-bit kernel on 32-bit UEFI</span></a>
<ul>
<li class="toclevel-3 tocsection-25"><a href="#Using_GRUB"><span class="tocnumber">6.3.1</span> <span class="toctext">Using GRUB</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-26"><a href="#Testing_UEFI_in_systems_without_native_support"><span class="tocnumber">7</span> <span class="toctext">Testing UEFI in systems without native support</span></a>
<ul>
<li class="toclevel-2 tocsection-27"><a href="#OVMF_for_virtual_machines"><span class="tocnumber">7.1</span> <span class="toctext">OVMF for virtual machines</span></a></li>
<li class="toclevel-2 tocsection-28"><a href="#DUET_for_BIOS_only_systems"><span class="tocnumber">7.2</span> <span class="toctext">DUET for BIOS only systems</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-29"><a href="#Troubleshooting"><span class="tocnumber">8</span> <span class="toctext">Troubleshooting</span></a>
<ul>
<li class="toclevel-2 tocsection-30"><a href="#Windows_7_will_not_boot_in_UEFI_mode"><span class="tocnumber">8.1</span> <span class="toctext">Windows 7 will not boot in UEFI mode</span></a></li>
<li class="toclevel-2 tocsection-31"><a href="#Windows_changes_boot_order"><span class="tocnumber">8.2</span> <span class="toctext">Windows changes boot order</span></a></li>
<li class="toclevel-2 tocsection-32"><a href="#USB_media_gets_struck_with_black_screen"><span class="tocnumber">8.3</span> <span class="toctext">USB media gets struck with black screen</span></a></li>
<li class="toclevel-2 tocsection-33"><a href="#UEFI_boot_loader_does_not_show_up_in_firmware_menu"><span class="tocnumber">8.4</span> <span class="toctext">UEFI boot loader does not show up in firmware menu</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-34"><a href="#See_also"><span class="tocnumber">9</span> <span class="toctext">See also</span></a></li>
</ul>
</div>

<h2><span class="mw-headline" id="UEFI_versions">UEFI versions</span></h2>
<ul><li>UEFI started as Intel's EFI in versions 1.x.</li>
<li>Later, a group of companies called the UEFI Forum took over its development, which renamed it as Unified EFI starting with version 2.0.</li>
<li>Unless specified as EFI 1.x, EFI and UEFI terms are used interchangeably to denote UEFI 2.x firmware.</li>
<li>Apple's EFI implementation is neither a EFI 1.x version nor UEFI 2.x version but mixes up both. This kind of firmware does not fall under any one (U)EFI specification and therefore is not a standard UEFI firmware. Unless stated explicitly, these instructions are general and some of them may not work or may be different in <a href="/index.php/MacBook" class="mw-redirect" title="MacBook">Apple Macs</a>.</li></ul>
<p>The latest UEFI specification can be found at <a rel="nofollow" class="external free" href="https://uefi.org/specifications">https://uefi.org/specifications</a>.
</p>
<h2><span class="mw-headline" id="UEFI_firmware_bitness">UEFI firmware bitness</span></h2>
<p>Under UEFI, every program whether it is an OS loader or a utility (e.g. a memory testing app or recovery tool), should be a EFI application corresponding to the UEFI firmware bitness/architecture.
</p><p>The vast majority of UEFI firmwares, including recent Apple Macs, use x86_64 UEFI firmware. The only known devices that use IA32 (32-bit) UEFI are older (pre 2008) Apple Macs, Intel Atom System-on-Chip systems (as on 2 November 2013)<a rel="nofollow" class="external autonumber" href="https://software.intel.com/en-us/blogs/2015/07/22/why-cheap-systems-run-32-bit-uefi-on-x64-systems">[1]</a> and some older Intel server boards that are known to operate on Intel EFI 1.10 firmware.
</p><p>An x86_64 UEFI firmware does not include support for launching 32-bit EFI applications (unlike x86_64 Linux and Windows versions which include such support). Therefore the EFI application must be compiled for that specific firmware processor bitness/architecture.
</p>
<div class="archwiki-template-box archwiki-template-box-note"><strong>Note:</strong> The official ISO does not support booting on 32-bit (IA32) UEFI systems, see <a href="#Booting_64-bit_kernel_on_32-bit_UEFI">#Booting 64-bit kernel on 32-bit UEFI</a> for available workarounds.</div>
<h3><span class="mw-headline" id="Checking_the_firmware_bitness">Checking the firmware bitness</span></h3>
<p>The firmware bitness can be checked from a booted operating system.
</p>
<h4><span class="mw-headline" id="From_Linux">From Linux</span></h4>
<p>On distributions running Linux kernel 4.0 or newer, the UEFI firmware bitness can be found via the sysfs interface. Run:
</p>
<pre>$ cat /sys/firmware/efi/fw_platform_size
</pre>
<p>It will return <code>64</code> for a 64-bit (x86_64) UEFI or <code>32</code> for a 32-bit (IA32) UEFI. If the file does not exist, then you have not booted in UEFI mode.
</p>
<h4><span class="mw-headline" id="From_Mac_OS">From Mac OS</span></h4>
<p>Pre-2008 <a href="/index.php/Mac" title="Mac">Macs</a> mostly have IA32 EFI firmware while &gt;=2008 Macs have mostly x86_64 EFI. All Macs capable of running Mac OS X Snow Leopard 64-bit Kernel have x86_64 EFI 1.x firmware.
</p><p>To find out the arch of the EFI firmware in a Mac, type the following into the Mac OS X terminal:
</p>
<pre>$ ioreg -l -p IODeviceTree | grep firmware-abi
</pre>
<p>If the command returns <code>EFI32</code> then it is IA32 (32-bit) EFI firmware. If it returns <code>EFI64</code> then it is x86_64 EFI firmware. Most of the Macs do not have UEFI 2.x firmware as Apple's EFI implementation is not fully compliant with UEFI 2.x specification.
</p>
<h4><span class="mw-headline" id="From_Microsoft_Windows">From Microsoft Windows</span></h4>
<p>64-bit versions of Windows do not support booting on a 32-bit UEFI. So, if you have a 32-bit version of Windows booted in UEFI mode, you have a 32-bit UEFI.
</p><p>To check the bitness run <code>msinfo32.exe</code>. In the <i>System Summary</i> section look at the values of "System Type" and "BIOS mode".
</p><p>For a 64-bit Windows on a 64-bit UEFI it will be <code>System Type: x64-based PC</code> and <code>BIOS mode: UEFI</code>, for a 32-bit Windows on a 32-bit UEFI - <code>System Type: x86-based PC</code> and <code>BIOS mode: UEFI</code>. If the "BIOS mode" is not <code>UEFI</code>, then Windows is not installed in UEFI mode.
</p>
<h2><span class="mw-headline" id="Linux_kernel_config_options_for_UEFI">Linux kernel config options for UEFI</span></h2>
<p>The required Linux Kernel configuration options<a rel="nofollow" class="external autonumber" href="https://www.kernel.org/doc/Documentation/x86/x86_64/uefi.txt">[2]</a> for UEFI systems are:
</p>
<pre>CONFIG_RELOCATABLE=y
CONFIG_EFI=y
CONFIG_EFI_STUB=y
CONFIG_X86_SYSFB=y
CONFIG_FB_SIMPLE=y
CONFIG_FRAMEBUFFER_CONSOLE=y
</pre>
<p>UEFI Runtime Variables Support (<b>efivarfs</b> filesystem - <code>/sys/firmware/efi/efivars</code>). This option is important as this is required to manipulate UEFI runtime variables using tools like <code>/usr/bin/efibootmgr</code>. The below config option has been added in kernel 3.10 and above.
</p>
<pre>CONFIG_EFIVAR_FS=y
</pre>
<p>UEFI Runtime Variables Support (old <b>efivars sysfs</b> interface - <code>/sys/firmware/efi/vars</code>). This option should be disabled to prevent any potential issues with both efivarfs and sysfs-efivars enabled.
</p>
<pre>CONFIG_EFI_VARS=n
</pre>
<p><a href="/index.php/GUID_Partition_Table" class="mw-redirect" title="GUID Partition Table">GUID Partition Table</a> (GPT) config option - mandatory for UEFI support
</p>
<pre>CONFIG_EFI_PARTITION=y
</pre>
<p>EFI mixed-mode support - to boot a x64_64 kernel on a IA32 UEFI.
</p>
<pre>CONFIG_EFI_MIXED=y
</pre>
<div class="archwiki-template-box archwiki-template-box-note"><strong>Note:</strong> All of the above options are enabled in Arch Linux <a href="/index.php/Kernels" class="mw-redirect" title="Kernels">kernels</a> in the official repositories.</div>
<h2><span class="mw-headline" id="UEFI_variables">UEFI variables</span></h2>
<p>UEFI defines variables through which an operating system can interact with the firmware. UEFI boot variables are used by the boot loader and used by the OS only for early system start-up. UEFI runtime variables allow an OS to manage certain settings of the firmware like the UEFI boot manager or managing the keys for UEFI Secure Boot protocol etc. You can get the list using:
</p>
<pre>$ efivar --list
</pre>
<h3><span class="mw-headline" id="UEFI_variables_support_in_Linux_kernel">UEFI variables support in Linux kernel</span></h3>
<p>Linux kernel exposes UEFI variables data to userspace via <b>efivarfs</b> (<b>EFI</b> <b>VAR</b>iable <b>F</b>ile<b>S</b>ystem) interface (<code>CONFIG_EFIVAR_FS</code>) - mounted using <code>efivarfs</code> kernel module at <code>/sys/firmware/efi/efivars</code> - it has no maximum per-variable size limitation and supports UEFI Secure Boot variables. Introduced in kernel 3.8.
</p>
<h3><span class="mw-headline" id="Requirements_for_UEFI_variable_support">Requirements for UEFI variable support</span></h3>
<ol><li>Kernel should be booted in UEFI mode via <a href="/index.php/EFISTUB" title="EFISTUB">EFISTUB</a> (optionally using a <a href="/index.php/Boot_manager" class="mw-redirect" title="Boot manager">boot manager</a>) or via the EFI handover protocol using a UEFI <a href="/index.php/Boot_loader" class="mw-redirect" title="Boot loader">boot loader</a>, not via BIOS or CSM, or Apple's Boot Camp which is also a CSM.</li>
<li>EFI Runtime Services support should be present in the kernel (<code>CONFIG_EFI=y</code>, check if present with <code>zgrep CONFIG_EFI /proc/config.gz</code>).</li>
<li>EFI Runtime Services in the kernel SHOULD NOT be disabled via kernel cmdline, i.e. <code>noefi</code> kernel parameter SHOULD NOT be used.</li>
<li><code>efivarfs</code> filesystem should be mounted at <code>/sys/firmware/efi/efivars</code>, otherwise follow <a href="#Mount_efivarfs">#Mount efivarfs</a> section below.</li>
<li><code>efivar</code> should list (option <code>-l</code>/<code>--list</code>) the UEFI variables without any error.</li></ol>
<p>If UEFI Variables support does not work even after the above conditions are satisfied, try the below workarounds:
</p>
<ol><li>If any userspace tool is unable to modify UEFI variable data, check for existence of <code>/sys/firmware/efi/efivars/dump-*</code> files. If they exist, delete them, reboot and retry again.</li>
<li>If the above step does not fix the issue, try booting with <code>efi_no_storage_paranoia</code> kernel parameter to disable kernel UEFI variable storage space check that may prevent writing/modification of UEFI variables.</li></ol>
<div class="archwiki-template-box archwiki-template-box-warning"><strong>Warning:</strong> <code>efi_no_storage_paranoia</code> should only be used when needed and should not be left as a normal boot option. The effect of this kernel command line parameter turns off a safeguard that was put in place to help avoid the bricking of machines when the NVRAM gets too full. See <a rel="nofollow" class="external text" href="https://bugs.archlinux.org/task/34641">FS#34641</a> for more information.</div>
<h4><span class="mw-headline" id="Mount_efivarfs">Mount efivarfs</span></h4>
<p>If <code>efivarfs</code> is not automatically mounted at <code>/sys/firmware/efi/efivars</code> by <a href="/index.php/Systemd" title="Systemd">systemd</a> during boot, then you need to manually mount it to expose UEFI variables to <a href="#Userspace_tools">userspace tools</a> like <i>efibootmgr</i>:
</p>
<pre># mount -t efivarfs efivarfs /sys/firmware/efi/efivars
</pre>
<div class="archwiki-template-box archwiki-template-box-note"><strong>Note:</strong> The above command should be run both <b>outside</b> (<b>before</b>) and <b>inside</b> the <a href="/index.php/Chroot" title="Chroot">chroot</a>, if any.</div>
<p>See <a rel="nofollow" class="external text" href="https://www.kernel.org/doc/Documentation/filesystems/efivarfs.txt">efivarfs.txt</a> for kernel documentation.
</p>
<h3><span class="mw-headline" id="Userspace_tools">Userspace tools</span></h3>
<p>There are few tools that can access/modify the UEFI variables, namely
</p>
<ul><li><b>efivar</b> &#8212; Library and Tool to manipulate UEFI variables (used by efibootmgr)</li></ul>
<dl><dd><a rel="nofollow" class="external free" href="https://github.com/rhboot/efivar">https://github.com/rhboot/efivar</a> || <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://www.archlinux.org/packages/?name=efivar">efivar</a></span>, <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://aur.archlinux.org/packages/efivar-git/">efivar-git</a></span><sup><small>AUR</small></sup></dd></dl>
<ul><li><b>efibootmgr</b> &#8212; Tool to manipulate UEFI Firmware Boot Manager Settings</li></ul>
<dl><dd><a rel="nofollow" class="external free" href="https://github.com/rhboot/efibootmgr">https://github.com/rhboot/efibootmgr</a> || <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://www.archlinux.org/packages/?name=efibootmgr">efibootmgr</a></span></dd></dl>
<ul><li><b>uefivars</b> &#8212; Dumps list of UEFI variables with some additional PCI related info (uses efibootmgr code internally)</li></ul>
<dl><dd><a rel="nofollow" class="external free" href="https://github.com/fpmurphy/Various/tree/master/uefivars-2.0">https://github.com/fpmurphy/Various/tree/master/uefivars-2.0</a> || <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://aur.archlinux.org/packages/uefivars-git/">uefivars-git</a></span><sup><small>AUR</small></sup></dd></dl>
<ul><li><b>efitools</b> &#8212; Tools for manipulating UEFI secure boot platforms</li></ul>
<dl><dd><a rel="nofollow" class="external free" href="https://git.kernel.org/pub/scm/linux/kernel/git/jejb/efitools.git">https://git.kernel.org/pub/scm/linux/kernel/git/jejb/efitools.git</a> || <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://www.archlinux.org/packages/?name=efitools">efitools</a></span></dd></dl>
<ul><li><b>Ubuntu's Firmware Test Suite</b> &#8212; Test suite that performs sanity checks on Intel/AMD PC firmware</li></ul>
<dl><dd><a rel="nofollow" class="external free" href="https://wiki.ubuntu.com/FirmwareTestSuite/">https://wiki.ubuntu.com/FirmwareTestSuite/</a> || <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://aur.archlinux.org/packages/fwts-git/">fwts-git</a></span><sup><small>AUR</small></sup></dd></dl>
<h4><span class="mw-headline" id="efibootmgr">efibootmgr</span></h4>
<p>You will have to <a href="/index.php/Install" class="mw-redirect" title="Install">install</a> the <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://www.archlinux.org/packages/?name=efibootmgr">efibootmgr</a></span> package.
</p>
<div class="archwiki-template-box archwiki-template-box-note"><strong>Note:</strong> 
<ul><li>If <i>efibootmgr</i> does not work on your system, you can reboot into <a href="#UEFI_Shell">#UEFI Shell</a> and use <code>bcfg</code> to create a boot entry for the bootloader.</li>
<li>If you are unable to use <code>efibootmgr</code>, some UEFI firmwares allow users to directly manage UEFI boot entries from within its boot-time interface.  For example, some firmwares have an "Add New Boot Option" choice which enables you to select a local EFI system partition and manually enter the EFI application location e.g. <code>\EFI\refind\refind_x64.efi</code>.</li>
<li>The below commands use <a href="/index.php/REFInd" title="REFInd">rEFInd</a> boot manager as example.</li></ul>
</div>
<p>To add a new boot option using <i>efibootmgr</i> you need to know three things:
</p>
<ol><li>The disk containing the <a href="/index.php/EFI_system_partition" title="EFI system partition">EFI system partition</a> (ESP). E.g.: <code>/dev/sda</code>, <code>/dev/nvme0n1</code>.</li>
<li>The partition number of the ESP on that disk. The <code><i>Y</i></code> in <code>/dev/sda<i>Y</i></code> or <code>/dev/nvme0n1p<i>Y</i></code>.</li>
<li>The path to the EFI application (relative to the root of the ESP)</li></ol>
<p>For example, if you want to add a boot option for <code>/efi/EFI/refind/refind_x64.efi</code> where <code>/efi</code> is the mount point of the ESP, run
</p>
<pre style="margin-bottom: 0; border-bottom:none; padding-bottom:0.8em;">$ findmnt /efi</pre>
<pre style="margin-top: 0; border-top-style:dashed; padding-top: 0.8em;">TARGET SOURCE    FSTYPE OPTIONS
/efi   /dev/sda1 vfat   rw,flush,tz=UTC</pre>
<p>In this example, this indicates that the ESP is on disk <code>/dev/sda</code> and has partition number 1. The path to the EFI application relative to the root of the ESP is <code>/EFI/refind/refind_x64.efi</code>. So you would create the boot entry as follows:
</p>
<pre># efibootmgr --create --disk /dev/sda --part 1 --loader /EFI/refind/refind_x64.efi --label "rEFInd Boot Manager" --verbose
</pre>
<div class="noprint archwiki-template-message">
<p><a href="/index.php/File:Tango-inaccurate.png" class="image"><img alt="Tango-inaccurate.png" src="/images/d/d6/Tango-inaccurate.png" width="48" height="48" /></a><b>The factual accuracy of this article or section is disputed.</b><a href="/index.php/File:Tango-inaccurate.png" class="image"><img alt="Tango-inaccurate.png" src="/images/d/d6/Tango-inaccurate.png" width="48" height="48" /></a></p>
<div><b>Reason:</b> <code>/dev/nvme0n1p1</code> is a partition not a disk, the partition number should be specified using the <code>--part</code> option. (Discuss in <a rel="nofollow" class="external text" href="https://wiki.archlinux.org/index.php/Talk:Unified_Extensible_Firmware_Interface">Talk:Unified Extensible Firmware Interface#</a>)</div>
</div>
<pre># efibootmgr --create --disk /dev/nvme0n1p1 --loader /EFI/refind/refind_x64.efi --label "rEFINd Boot Manager" --verbose
</pre>
<p>See <span class="plainlinks archwiki-template-man" title="$ man 8 efibootmgr"><a rel="nofollow" class="external text" href="https://jlk.fjfi.cvut.cz/arch/manpages/man/efibootmgr.8">efibootmgr(8)</a></span> or <a rel="nofollow" class="external text" href="https://raw.githubusercontent.com/rhinstaller/efibootmgr/master/README">efibootmgr README</a> for more info.
</p>
<div class="archwiki-template-box archwiki-template-box-note"><strong>Note:</strong> UEFI uses backward slash <code>\</code> as path separator but <i>efibootmgr</i> automatically converts UNIX-style <code>/</code> path separators.</div>
<h2><span class="mw-headline" id="UEFI_Shell">UEFI Shell</span></h2>
<p>The UEFI Shell is a shell/terminal for the firmware which allows launching EFI applications which include UEFI bootloaders. Apart from that, the shell can also be used to obtain various other information about the system or the firmware like memory map (memmap), modifying boot manager variables (bcfg), running partitioning programs (diskpart), loading UEFI drivers, editing text files (edit), hexedit etc.
</p>
<h3><span class="mw-headline" id="Obtaining_UEFI_Shell">Obtaining UEFI Shell</span></h3>
<p>You can download a BSD licensed UEFI Shell from Intel's TianoCore UDK/EDK2 project:
</p>
<ul><li><a href="/index.php/AUR" class="mw-redirect" title="AUR">AUR</a> package <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://aur.archlinux.org/packages/uefi-shell-git/">uefi-shell-git</a></span><sup><small>AUR</small></sup> (recommended) - provides x86_64 Shell for x86_64 (64-bit) UEFI and IA32 Shell for IA32 (32-bit) UEFI - compiled directly from latest TianoCore EDK2 source.</li>
<li>There are copies of Shell v1 and Shell v2 in the EFI directory on the Arch install media image.</li>
<li><a rel="nofollow" class="external text" href="https://github.com/tianocore/edk2/tree/master/ShellBinPkg">Precompiled UEFI Shell v2 binaries</a> (may not be up-to-date).</li>
<li><a rel="nofollow" class="external text" href="https://github.com/tianocore/edk2/tree/UDK2018/EdkShellBinPkg">Precompiled UEFI Shell v1 binaries</a> (not updated anymore upstream).</li>
<li><a rel="nofollow" class="external text" href="https://ptpb.pw/~Shell2.zip">Precompiled UEFI Shell v2 binary with bcfg modified to work with UEFI pre-2.3 firmware</a> - from Clover EFI bootloader.</li></ul>
<p>Shell v2 works best in UEFI 2.3+ systems and is recommended over Shell v1 in those systems. Shell v1 should work in all UEFI systems irrespective of the spec. version the firmware follows. More info at <a rel="nofollow" class="external text" href="https://github.com/tianocore/tianocore.github.io/wiki/ShellPkg">ShellPkg</a> and <a rel="nofollow" class="external text" href="https://edk2-devel.narkive.com/zCN4CEnb/inclusion-of-uefi-shell-in-linux-distro-iso">this mail</a>.
</p>
<h3><span class="mw-headline" id="Launching_UEFI_Shell">Launching UEFI Shell</span></h3>
<p>Few Asus and other AMI Aptio x86_64 UEFI firmware based motherboards (from Sandy Bridge onwards) provide an option called <code>"Launch EFI Shell from filesystem device"</code> . For those motherboards, download the x86_64 UEFI Shell and copy it to your EFI system partition as <code>&lt;EFI_SYSTEM_PARTITION&gt;/shellx64.efi</code>.
</p><p>Systems with Phoenix SecureCore Tiano UEFI firmware are known to have embedded UEFI Shell which can be launched using either <code>F6</code>, <code>F11</code> or <code>F12</code> key.
</p>
<div class="archwiki-template-box archwiki-template-box-note"><strong>Note:</strong> If you are unable to launch UEFI Shell from the firmware directly using any of the above mentioned methods, create a FAT32 USB pen drive with <code>Shell.efi</code> copied as <code>(USB)/EFI/BOOT/BOOTx64.EFI</code>. This USB should come up in the firmware boot menu. Launching this option will launch the UEFI Shell for you.</div>
<h3><span class="mw-headline" id="Important_UEFI_Shell_commands">Important UEFI Shell commands</span></h3>
<p>UEFI Shell commands usually support <code>-b</code> option which makes output pause after each page. Run <code>help -b</code> to list available commands.
</p><p>More info at <a rel="nofollow" class="external free" href="https://software.intel.com/en-us/articles/efi-shells-and-scripting/">https://software.intel.com/en-us/articles/efi-shells-and-scripting/</a>
</p>
<h4><span class="mw-headline" id="bcfg">bcfg</span></h4>
<p><code>bcfg</code> modifies the UEFI NVRAM entries which allows the user to change the boot entries or driver options. This command is described in detail in page 83 (Section 5.3) of the <a rel="nofollow" class="external text" href="https://www.uefi.org/sites/default/files/resources/UEFI_Shell_Spec_2_0.pdf">UEFI Shell Specification 2.0</a> document.
</p>
<div class="archwiki-template-box archwiki-template-box-note"><strong>Note:</strong> 
<ul><li>Try <code>bcfg</code> only if <code>efibootmgr</code> fails to create working boot entries on your system.</li>
<li>UEFI Shell v1 official binary does not support <code>bcfg</code> command. See <a href="#Obtaining_UEFI_Shell">#Obtaining UEFI Shell</a> for a modified UEFI Shell v2 binary which may work in UEFI pre-2.3 firmwares.</li></ul>
</div>
<p>To dump a list of current boot entries:
</p>
<pre>Shell&gt; bcfg boot dump -v
</pre>
<p>To add a boot menu entry for rEFInd (for example) as 4th (numbering starts from zero) option in the boot menu:
</p>
<pre>Shell&gt; bcfg boot add 3 FS0:\EFI\refind\refind_x64.efi "rEFInd"
</pre>
<p>where <code>FS0:</code> is the mapping corresponding to the EFI system partition and <code>FS0:\EFI\refind\refind_x64.efi</code> is the file to be launched.
</p><p>To add an entry to boot directly into your system without a bootloader, configure a boot option using your kernel as an <a href="/index.php/EFISTUB#UEFI_Shell" title="EFISTUB">EFISTUB</a>:
</p>
<pre>Shell&gt; bcfg boot add <b>N</b> fs<b>V</b>:\vmlinuz-linux "Arch Linux"
Shell&gt; bcfg boot -opt <b>N</b> "root=<b>/dev/sdX#</b> initrd=\initramfs-linux.img"
</pre>
<p>where <code>N</code> is the priority, <code>V</code> is the volume number of your EFI system partition, and <code>/dev/sdX#</code> is your root partition.
</p><p>To remove the 4th boot option:
</p>
<pre>Shell&gt; bcfg boot rm 3
</pre>
<p>To move the boot option #3 to #0 (i.e. 1st or the default entry in the UEFI Boot menu):
</p>
<pre>Shell&gt; bcfg boot mv 3 0
</pre>
<p>For bcfg help text:
</p>
<pre>Shell&gt; help bcfg -v -b
</pre>
<p>or:
</p>
<pre>Shell&gt; bcfg -? -v -b
</pre>
<h4><span class="mw-headline" id="map">map</span></h4>
<p><code>map</code> displays a list of device mappings i.e. the names of available file systems (<code>FS0</code>) and storage devices (<code>blk0</code>).
</p><p>Before running file system commands such as <code>cd</code> or <code>ls</code>, you need to change the shell to the appropriate file system by typing its name:
</p>
<pre>Shell&gt; FS0:
FS0:\&gt; cd EFI/
</pre>
<h4><span class="mw-headline" id="edit">edit</span></h4>
<p><code>edit</code> provides a basic text editor with an interface similar to nano, but slightly less functional. It handles UTF-8 encoding and takes care or LF vs CRLF line endings.
</p><p>For example, to edit rEFInd's <code>refind.conf</code> in the EFI system partition (<code>FS0:</code> in the firmware),
</p>
<pre>Shell&gt; edit FS0:\EFI\refind\refind.conf
</pre>
<p>Type <code>Ctrl-E</code> for help.
</p>
<h2><span class="mw-headline" id="UEFI_Bootable_Media">UEFI Bootable Media</span></h2>
<h3><span class="mw-headline" id="Create_UEFI_bootable_USB_from_ISO">Create UEFI bootable USB from ISO</span></h3>
<p>Follow <a href="/index.php/USB_flash_installation_media#BIOS_and_UEFI_bootable_USB" title="USB flash installation media">USB flash installation media#BIOS and UEFI bootable USB</a>
</p>
<h3><span class="mw-headline" id="Remove_UEFI_boot_support_from_optical_media">Remove UEFI boot support from optical media</span></h3>
<div class="archwiki-template-box archwiki-template-box-note"><strong>Note:</strong> This section mentions removing UEFI boot support from a <b>CD/DVD only</b> (Optical Media), not from a USB flash drive.</div>
<p>Most of the 32-bit EFI Macs and some 64-bit EFI Macs refuse to boot from a UEFI(X64)+BIOS bootable CD/DVD. If one wishes to proceed with the installation using optical media, it might be necessary to remove UEFI support first.
</p>
<ul><li>Mount the official installation media and obtain the <code>archisolabel</code> as shown in the previous section.</li></ul>
<pre># mount -o loop <i>input.iso</i> /mnt/iso
</pre>
<ul><li>Then rebuild the ISO, excluding the UEFI optical media booting support, using <code>xorriso</code> from <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://www.archlinux.org/packages/?name=libisoburn">libisoburn</a></span>. Be sure to set the correct archisolabel, e.g. "ARCH_201411" or similar:</li></ul>
<pre>$ xorriso -as mkisofs -iso-level 3 \
    -full-iso9660-filenames\
    -volid "<i>archisolabel</i>" \
    -appid "Arch Linux CD" \
    -publisher "Arch Linux &lt;<a rel="nofollow" class="external free" href="https://www.archlinux.org">https://www.archlinux.org</a>&gt;" \
    -preparer "prepared by $USER" \
    -eltorito-boot isolinux/isolinux.bin \
    -eltorito-catalog isolinux/boot.cat \
    -no-emul-boot -boot-load-size 4 -boot-info-table \
    -isohybrid-mbr "/mnt/iso/isolinux/isohdpfx.bin" \
    -output <i>output.iso</i> /mnt/iso/</pre>
<ul><li>Burn <code><i>output.iso</i></code> to optical media and proceed with installation normally.</li></ul>
<h3><span class="mw-headline" id="Booting_64-bit_kernel_on_32-bit_UEFI">Booting 64-bit kernel on 32-bit UEFI</span></h3>
<p>Official ISO (<a href="/index.php/Archiso" title="Archiso">Archiso</a>) does not support booting on 32-bit (IA32) UEFI systems (<a rel="nofollow" class="external text" href="https://bugs.archlinux.org/task/53182">FS#53182</a>) since it uses EFISTUB (via <a href="/index.php/Systemd-boot" title="Systemd-boot">systemd-boot</a> boot manager for menu) for booting the kernel in UEFI mode. To boot a 64-bit kernel with 32-bit UEFI you have to use a boot loader that does not rely on EFI boot stub for launching kernels.
</p>
<div class="archwiki-template-box archwiki-template-box-tip"><strong>Tip:</strong> <a href="/index.php/Archboot" title="Archboot">Archboot</a> iso supports booting on 32-bit (IA32) UEFI systems.</div>
<h4><span class="mw-headline" id="Using_GRUB">Using GRUB</span></h4>
<p>This section describes how to setup <a href="/index.php/GRUB" title="GRUB">GRUB</a> as the USB's UEFI bootloader.
</p>
<ul><li><a href="/index.php/USB_flash_installation_media#Using_manual_formatting" title="USB flash installation media">Create an editable USB Flash Installation</a>. Since we are going to use GRUB, you only need to follow the steps up until the <code>syslinux</code> part</li></ul>
<ul><li><a href="/index.php/GRUB/Tips_and_tricks#GRUB_standalone" title="GRUB/Tips and tricks">Create a GRUB standalone image</a> for 32-bit UEFI systems:</li></ul>
<pre># echo 'configfile ${cmdpath}/grub.cfg' &gt; /tmp/grub.cfg
# grub-mkstandalone -d /usr/lib/grub/i386-efi -O i386-efi --modules="part_gpt part_msdos" --locales="en@quot" --themes="" -o "<i>/mnt/usb/</i>EFI/boot/bootia32.efi" "boot/grub/grub.cfg=/tmp/grub.cfg" -v
</pre>
<ul><li>Create <code><i>/mnt/usb</i>/EFI/boot/grub.cfg</code> with the following contents (replace <code>ARCH_YYYYMM</code> with the required archiso label e.g. <code>ARCH_201507</code>):</li></ul>
<div class="archwiki-template-box archwiki-template-box-tip"><strong>Tip:</strong> 
<ul><li>The archiso label can be aquired from the <i>.iso</i> file with <code>isoinfo</code> from <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://www.archlinux.org/packages/?name=cdrtools">cdrtools</a></span> or <code>iso-info</code> from <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://www.archlinux.org/packages/?name=libcdio">libcdio</a></span>.</li>
<li>The given configuration entries can also be entered inside a <a href="/index.php/GRUB#Using_the_command_shell" title="GRUB">GRUB command-shell</a>.</li></ul>
</div>
<p>For the official ISO:
</p>
<pre style="margin-bottom: 0; border-bottom:none; padding-bottom:0.8em;"><i>/mnt/usb</i>/EFI/boot/grub.cfg</pre>
<pre style="margin-top: 0; border-top-style:dashed; padding-top: 0.8em;">insmod part_gpt
insmod part_msdos
insmod fat

insmod efi_gop
insmod efi_uga
insmod video_bochs
insmod video_cirrus

insmod font

if loadfont "${prefix}/fonts/unicode.pf2"&#160;; then
    insmod gfxterm
    set gfxmode="1024x768x32;auto"
    terminal_input console
    terminal_output gfxterm
fi

menuentry "Arch Linux archiso x86_64 UEFI USB" {
    set gfxpayload=keep
    search --no-floppy --set=root --label <i>ARCH_YYYYMM</i>
    linux /arch/boot/x86_64/vmlinuz archisobasedir=arch archisolabel=<i>ARCH_YYYYMM</i> add_efi_memmap
    initrd /arch/boot/intel_ucode.img /arch/boot/x86_64/archiso.img
}</pre>
<h2><span class="mw-headline" id="Testing_UEFI_in_systems_without_native_support">Testing UEFI in systems without native support</span></h2>
<h3><span class="mw-headline" id="OVMF_for_virtual_machines">OVMF for virtual machines</span></h3>
<p><a rel="nofollow" class="external text" href="https://tianocore.github.io/ovmf/">OVMF</a> is a TianoCore project to enable UEFI support for Virtual Machines. OVMF contains a sample UEFI firmware and a separate non-volatile variable store for QEMU.
</p><p>You can install <span class="plainlinks archwiki-template-pkg"><a rel="nofollow" class="external text" href="https://www.archlinux.org/packages/?name=ovmf">ovmf</a></span> from the extra repository.
</p><p>It is <a rel="nofollow" class="external text" href="https://www.linux-kvm.org/downloads/lersek/ovmf-whitepaper-c770f8c.txt">advised</a> to make a local copy of the non-volatile variable store for your virtual machine:
</p>
<pre>$ cp /usr/share/ovmf/x64/OVMF_VARS.fd my_uefi_vars.bin
</pre>
<p>To use the OVMF firmware and this variable store, add following to your QEMU command:
</p>
<pre>-drive if=pflash,format=raw,readonly,file=/usr/share/ovmf/x64/OVMF_CODE.fd \
-drive if=pflash,format=raw,file=my_uefi_vars.bin
</pre>
<p>For example:
</p>
<pre>$ qemu-system-x86_64 -enable-kvm -m 1G -drive if=pflash,format=raw,readonly,file=/usr/share/ovmf/x64/OVMF_CODE.fd -drive if=pflash,format=raw,file=my_uefi_vars.bin …
</pre>
<h3><span class="mw-headline" id="DUET_for_BIOS_only_systems">DUET for BIOS only systems</span></h3>
<p>DUET is a TianoCore project that enables chainloading a full UEFI environment from a BIOS system, in a way similar to BIOS OS booting. This method is being discussed extensively in <a rel="nofollow" class="external free" href="https://www.insanelymac.com/forum/topic/186440-linux-and-windows-uefi-boot-using-tianocore-duet-firmware/">https://www.insanelymac.com/forum/topic/186440-linux-and-windows-uefi-boot-using-tianocore-duet-firmware/</a>. Pre-build DUET images can be downloaded from one of the repos at <a rel="nofollow" class="external free" href="https://gitlab.com/tianocore_uefi_duet_builds/tianocore_uefi_duet_installer">https://gitlab.com/tianocore_uefi_duet_builds/tianocore_uefi_duet_installer</a>. Specific instructions for setting up DUET is available at <a rel="nofollow" class="external free" href="https://gitlab.com/tianocore_uefi_duet_builds/tianocore_uefi_duet_installer/blob/master/Migle_BootDuet_INSTALL.txt">https://gitlab.com/tianocore_uefi_duet_builds/tianocore_uefi_duet_installer/blob/master/Migle_BootDuet_INSTALL.txt</a> .
</p><p>You can also try <a rel="nofollow" class="external free" href="https://sourceforge.net/projects/cloverefiboot/">https://sourceforge.net/projects/cloverefiboot/</a> which provides modified DUET images that may contain some system specific fixes and is more frequently updated compared to the gitorious repos.
</p>
<h2><span class="mw-headline" id="Troubleshooting">Troubleshooting</span></h2>
<h3><span class="mw-headline" id="Windows_7_will_not_boot_in_UEFI_mode">Windows 7 will not boot in UEFI mode</span></h3>
<p>If you have installed Windows to a different hard disk with GPT partitioning and still have a MBR partitioned hard disk in your computer, then it is possible that the firmware (UEFI) is starting its CSM support (for booting MBR partitions) and therefore Windows will not boot. To solve this merge your MBR hard disk to GPT partitioning or disable the SATA port where the MBR hard disk is plugged in or unplug the SATA connector from this hard disk.
</p><p>Mainboards with this kind of problem:
</p>
<ul><li>Gigabyte Z77X-UD3H rev. 1.1 (UEFI version F19e)
<ul><li>The firmware option for booting "UEFI Only" does not prevent the firmware from starting CSM.</li></ul></li></ul>
<h3><span class="mw-headline" id="Windows_changes_boot_order">Windows changes boot order</span></h3>
<p>If you <a href="/index.php/Dual_boot_with_Windows" title="Dual boot with Windows">dual boot with Windows</a> and your motherboard just boots Windows immediately instead of your chosen EFI application, there are several possible causes and workarounds.
</p>
<ul><li>Ensure <a href="/index.php/Dual_boot_with_Windows#Fast_Start-Up" title="Dual boot with Windows">Fast Startup</a> is disabled in your Windows power options</li>
<li>Ensure <a href="/index.php/Secure_Boot" title="Secure Boot">Secure Boot</a> is disabled in your BIOS (if you are not using a signed boot loader)</li>
<li>Ensure your UEFI boot order does not have Windows Boot Manager set first e.g. using <a href="#efibootmgr">#efibootmgr</a> and what you see in the configuration tool of the UEFI. Some motherboards override by default any settings set with efibootmgr by Windows if it detects it. This is confirmed in a Packard Bell laptop.</li>
<li>If your motherboard is booting the default boot path (<code>\EFI\BOOT\BOOTX64.EFI</code>), this file may have been overwritten with the Windows boot loader. Try setting the correct boot path e.g. using <a href="#efibootmgr">#efibootmgr</a>.</li>
<li>If the previous steps do not work, you can tell the Windows boot loader to run a different EFI application. From a Windows Administrator command prompt: <pre># bcdedit /set "{bootmgr}" path "\EFI\<i>path</i>\<i>to</i>\<i>app.efi</i>"</pre></li>
<li>Alternatively, you can set a startup script in Windows that ensures that the boot order is set correctly every time you boot Windows.
<ol><li>Open a command prompt with admin privlages. Run <code>bcdedit /enum firmware</code> and find your desired boot entry.</li>
<li>Copy the Identifier, including the brackets, e.g. <code>{31d0d5f4-22ad-11e5-b30b-806e6f6e6963}</code></li>
<li>Create a batch file with the command <code>bcdedit /set "{fwbootmgr}" DEFAULT "{<i>copied boot identifier</i>}"</code></li>
<li>Open <i>gpedit.msc</i> and under <i>Local Computer Policy &gt; Computer Configuration &gt; Windows Settings &gt; Scripts(Startup/Shutdown)</i>, choose <i>Startup</i></li>
<li>Under the <i>Scripts</i> tab, choose the <i>Add</i> button, and select your batch file</li></ol></li></ul>
<h3><span class="mw-headline" id="USB_media_gets_struck_with_black_screen">USB media gets struck with black screen</span></h3>
<p>This issue can occur due to <a href="/index.php/KMS" class="mw-redirect" title="KMS">KMS</a> issue. Try <a href="/index.php/Kernel_mode_setting#Disabling_modesetting" title="Kernel mode setting">Disabling KMS</a> while booting the USB.
</p>
<h3><span class="mw-headline" id="UEFI_boot_loader_does_not_show_up_in_firmware_menu">UEFI boot loader does not show up in firmware menu</span></h3>
<p>On certain UEFI motherboards like some boards with an Intel Z77 chipset, adding entries with <code>efibootmgr</code> or <code>bcfg</code> from the UEFI Shell will not work because they do not show up on the boot menu list after being added to NVRAM.
</p><p>This issue is caused because the motherboards can only load Microsoft Windows. To solve this you have to place the <i>.efi</i> file in the location that Windows uses.
</p><p>Copy the <code>bootx64.efi</code> file from the Arch Linux installation medium (<code>FSO:</code>) to the Microsoft directory your <a href="/index.php/ESP" class="mw-redirect" title="ESP">ESP</a> partition on your hard drive (<code>FS1:</code>). Do this by booting into EFI shell and typing:
</p>
<pre>Shell&gt; mkdir FS1:\EFI\Microsoft
Shell&gt; mkdir FS1:\EFI\Microsoft\Boot
Shell&gt; cp FS0:\EFI\BOOT\bootx64.efi FS1:\EFI\Microsoft\Boot\bootmgfw.efi
</pre>
<p>After reboot, any entries added to NVRAM should show up in the boot menu.
</p>
<h2><span class="mw-headline" id="See_also">See also</span></h2>
<ul><li><a href="https://en.wikipedia.org/wiki/UEFI" class="extiw" title="wikipedia:UEFI">Wikipedia:UEFI</a></li>
<li><a rel="nofollow" class="external text" href="https://www.uefi.org/home/">UEFI Forum</a> - contains the official <a rel="nofollow" class="external text" href="https://uefi.org/specifications">UEFI Specifications</a> - GUID Partition Table is part of UEFI Specification</li>
<li><a rel="nofollow" class="external text" href="https://www.happyassassin.net/2014/01/25/uefi-boot-how-does-that-actually-work-then/">UEFI boot: how does that actually work, then? - A blog post by AdamW</a></li>
<li><a rel="nofollow" class="external text" href="https://www.kernel.org/doc/Documentation/x86/x86_64/uefi.txt">Linux Kernel x86_64 UEFI Documentation</a></li>
<li><a rel="nofollow" class="external text" href="https://www.intel.com/content/www/us/en/architecture-and-technology/unified-extensible-firmware-interface/efi-homepage-general-technology.html">Intel's page on EFI</a></li>
<li><a rel="nofollow" class="external text" href="https://firmware.intel.com/">Intel Architecture Firmware Resource Center</a></li>
<li><a rel="nofollow" class="external text" href="https://firmware.intel.com/blog/linux-efi-boot-stub">Matt Fleming - The Linux EFI Boot Stub</a></li>
<li><a rel="nofollow" class="external text" href="https://firmware.intel.com/blog/accessing-uefi-variables-linux">Matt Fleming - Accessing UEFI Variables from Linux</a></li>
<li><a rel="nofollow" class="external text" href="https://www.rodsbooks.com/linux-uefi/">Rod Smith - Linux on UEFI: A Quick Installation Guide</a></li>
<li><a rel="nofollow" class="external text" href="https://lkml.org/lkml/2011/6/8/322">UEFI Boot problems on some newer machines (LKML)</a></li>
<li><a rel="nofollow" class="external text" href="https://linuxplumbers.ubicast.tv/videos/plumbing-uefi-into-linux/">LPC 2012 Plumbing UEFI into Linux</a></li>
<li><a rel="nofollow" class="external text" href="https://linuxplumbers.ubicast.tv/videos/uefi-tutorial-part-1/">LPC 2012 UEFI Tutorial&#160;: part 1</a></li>
<li><a rel="nofollow" class="external text" href="https://linuxplumbers.ubicast.tv/videos/uefi-tutorial-part-2/">LPC 2012 UEFI Tutorial&#160;: part 2</a></li>
<li><a rel="nofollow" class="external text" href="https://www.tianocore.org/">Intel's TianoCore Project</a> for Open-Source UEFI firmware which includes DuetPkg for direct BIOS based booting and OvmfPkg used in QEMU and Oracle VirtualBox</li>
<li><a rel="nofollow" class="external text" href="https://jdebp.eu/FGA/efi-boot-process.html">FGA: The EFI boot process</a></li>
<li><a rel="nofollow" class="external text" href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-and-gpt-faq">Microsoft's Windows and GPT FAQ</a></li>
<li><a rel="nofollow" class="external text" href="https://gitlab.com/tianocore_uefi_duet_builds/tianocore_uefi_duet_installer/wikis/Windows_x64_BIOS_to_UEFI">Convert Windows x64 from BIOS-MBR mode to UEFI-GPT mode without Reinstall</a></li>
<li><a rel="nofollow" class="external text" href="https://gitlab.com/tianocore_uefi_duet_builds/tianocore_uefi_duet_installer/wikis/Linux_Windows_BIOS_UEFI_boot_USB">Create a Linux BIOS+UEFI and Windows x64 BIOS+UEFI bootable USB drive</a></li>
<li><a rel="nofollow" class="external text" href="https://rodsbooks.com/bios2uefi/">Rod Smith - A BIOS to UEFI Transformation</a></li>
<li><a rel="nofollow" class="external text" href="https://software.intel.com/en-us/articles/efi-shells-and-scripting/">EFI Shells and Scripting - Intel Documentation</a></li>
<li><a rel="nofollow" class="external text" href="https://software.intel.com/en-us/articles/uefi-shell/">UEFI Shell  - Intel Documentation</a></li>
<li><a rel="nofollow" class="external text" href="http://www.hpuxtips.es/?q=node/293">UEFI Shell - bcfg command info</a></li></ul>

<!-- 
NewPP limit report
Cached time: 20181224115339
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.107 seconds
Real time usage: 0.112 seconds
Preprocessor visited node count: 1120/1000000
Preprocessor generated node count: 3373/1000000
Post‐expand include size: 12846/2097152 bytes
Template argument size: 7582/2097152 bytes
Highest expansion depth: 5/40
Expensive parser function count: 0/100
Unstrip recursion depth: 0/20
Unstrip post‐expand size: 38/5000000 bytes
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%   41.692      1 -total
 23.69%    9.878     90 Template:Ic
 11.59%    4.834      5 Template:App
  7.74%    3.228      1 Template:Accuracy
  7.38%    3.077      8 Template:Note
  4.94%    2.059      8 Template:Pkg
  4.74%    1.975      2 Template:Warning
  4.50%    1.875      1 Template:Man
  4.46%    1.861      2 Template:Tip
  4.42%    1.842      1 Template:Related_articles_start
-->
</div>
<!-- Saved in parser cache with key archwiki:pcache:idhash:9549-0!canonical and timestamp 20181224115339 and revision id 559104
 -->
</div>					<div class="printfooter">
						Retrieved from "<a dir="ltr" href="https://wiki.archlinux.org/index.php?title=Unified_Extensible_Firmware_Interface&amp;oldid=559104">https://wiki.archlinux.org/index.php?title=Unified_Extensible_Firmware_Interface&amp;oldid=559104</a>"					</div>
				<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/index.php/Special:Categories" title="Special:Categories">Category</a>: <ul><li><a href="/index.php/Category:Boot_process" title="Category:Boot process">Boot process</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden category: <ul><li><a href="/index.php/Category:Pages_or_sections_flagged_with_Template:Accuracy" title="Category:Pages or sections flagged with Template:Accuracy">Pages or sections flagged with Template:Accuracy</a></li></ul></div></div>				<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
									<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
						<h3 id="p-personal-label">Personal tools</h3>
						<ul>
							<li id="pt-createaccount"><a href="/index.php?title=Special:CreateAccount&amp;returnto=Unified+Extensible+Firmware+Interface" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li><li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Unified+Extensible+Firmware+Interface" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>						</ul>
					</div>
									<div id="left-navigation">
										<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
						<h3 id="p-namespaces-label">Namespaces</h3>
						<ul>
							<li id="ca-nstab-main" class="selected"><span><a href="/index.php/Unified_Extensible_Firmware_Interface" title="View the content page [c]" accesskey="c">Page</a></span></li><li id="ca-talk"><span><a href="/index.php/Talk:Unified_Extensible_Firmware_Interface" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>						</ul>
					</div>
										<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
												<input type="checkbox" class="vectorMenuCheckbox" aria-labelledby="p-variants-label" />
						<h3 id="p-variants-label">
							<span>Variants</span>
						</h3>
						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id="right-navigation">
										<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
						<h3 id="p-views-label">Views</h3>
						<ul>
							<li id="ca-view" class="collapsible selected"><span><a href="/index.php/Unified_Extensible_Firmware_Interface">Read</a></span></li><li id="ca-viewsource" class="collapsible"><span><a href="/index.php?title=Unified_Extensible_Firmware_Interface&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li><li id="ca-history" class="collapsible"><span><a href="/index.php?title=Unified_Extensible_Firmware_Interface&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>						</ul>
					</div>
										<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
						<input type="checkbox" class="vectorMenuCheckbox" aria-labelledby="p-cactions-label" />
						<h3 id="p-cactions-label"><span>More</span></h3>
						<div class="menu">
							<ul>
															</ul>
						</div>
					</div>
										<div id="p-search" role="search">
						<h3>
							<label for="searchInput">Search</label>
						</h3>
						<form action="/index.php" id="searchform">
							<div id="simpleSearch">
								<input type="search" name="search" placeholder="Search ArchWiki" title="Search ArchWiki [f]" accesskey="f" id="searchInput"/><input type="hidden" value="Special:Search" name="title"/><input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton"/><input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"/>							</div>
						</form>
					</div>
									</div>
			</div>
			<div id="mw-panel">
				<div id="p-logo" role="banner"><a class="mw-wiki-logo" href="/index.php/Main_page"  title="Visit the main page"></a></div>
						<div class="portal" role="navigation" id="p-navigation" aria-labelledby="p-navigation-label">
			<h3 id="p-navigation-label">Navigation</h3>
			<div class="body">
								<ul>
					<li id="n-mainpage-description"><a href="/index.php/Main_page" title="Visit the main page [z]" accesskey="z">Main page</a></li><li id="n-Table-of-contents"><a href="/index.php/Table_of_contents">Table of contents</a></li><li id="n-portal"><a href="/index.php/Getting_involved" title="Various ways Archers can contribute to the community">Getting involved</a></li><li id="n-currentevents"><a href="/index.php/ArchWiki:News" title="The latest lowdown on the wiki">Wiki news</a></li><li id="n-randompage"><a href="/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>				</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id="p-Interaction" aria-labelledby="p-Interaction-label">
			<h3 id="p-Interaction-label">Interaction</h3>
			<div class="body">
								<ul>
					<li id="n-help"><a href="/index.php/Category:Help" title="Wiki navigation, reading, and editing help">Help</a></li><li id="n-Contributing"><a href="/index.php/ArchWiki:Contributing">Contributing</a></li><li id="n-recentchanges"><a href="/index.php/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li><li id="n-Recent-talks"><a href="https://wiki.archlinux.org/index.php/Special:RecentChanges?namespace=0&amp;invert=1" rel="nofollow">Recent talks</a></li><li id="n-newpages"><a href="/index.php/Special:NewPages">New pages</a></li><li id="n-Statistics"><a href="/index.php/ArchWiki:Statistics">Statistics</a></li><li id="n-Requests"><a href="/index.php/ArchWiki:Requests">Requests</a></li>				</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id="p-tb" aria-labelledby="p-tb-label">
			<h3 id="p-tb-label">Tools</h3>
			<div class="body">
								<ul>
					<li id="t-whatlinkshere"><a href="/index.php/Special:WhatLinksHere/Unified_Extensible_Firmware_Interface" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li><li id="t-recentchangeslinked"><a href="/index.php/Special:RecentChangesLinked/Unified_Extensible_Firmware_Interface" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li><li id="t-specialpages"><a href="/index.php/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li><li id="t-print"><a href="/index.php?title=Unified_Extensible_Firmware_Interface&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li><li id="t-permalink"><a href="/index.php?title=Unified_Extensible_Firmware_Interface&amp;oldid=559104" title="Permanent link to this revision of the page">Permanent link</a></li><li id="t-info"><a href="/index.php?title=Unified_Extensible_Firmware_Interface&amp;action=info" title="More information about this page">Page information</a></li>				</ul>
							</div>
		</div>
			<div class="portal" role="navigation" id="p-lang" aria-labelledby="p-lang-label">
			<h3 id="p-lang-label">In other languages</h3>
			<div class="body">
								<ul>
					<li class="interlanguage-link interwiki-es"><a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface_(Espa%C3%B1ol)" title="Unified Extensible Firmware Interface – español" lang="es" hreflang="es" class="interlanguage-link-target">Español</a></li><li class="interlanguage-link interwiki-it"><a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface_(Italiano)" title="Unified Extensible Firmware Interface – italiano" lang="it" hreflang="it" class="interlanguage-link-target">Italiano</a></li><li class="interlanguage-link interwiki-ja"><a href="https://wiki.archlinux.jp/index.php/Unified_Extensible_Firmware_Interface" title="Unified Extensible Firmware Interface – 日本語" lang="ja" hreflang="ja" class="interlanguage-link-target">日本語</a></li><li class="interlanguage-link interwiki-ru"><a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)" title="Unified Extensible Firmware Interface – русский" lang="ru" hreflang="ru" class="interlanguage-link-target">Русский</a></li><li class="interlanguage-link interwiki-zh-hans"><a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" title="Unified Extensible Firmware Interface – 中文（简体）‎" lang="zh-Hans" hreflang="zh-Hans" class="interlanguage-link-target">中文（简体）‎</a></li>				</ul>
							</div>
		</div>
				</div>
		</div>
				<div id="footer" role="contentinfo">
						<ul id="footer-info">
								<li id="footer-info-lastmod"> This page was last edited on 15 December 2018, at 10:27.</li>
								<li id="footer-info-copyright">Content is available under <a class="external" rel="nofollow" href="http://www.gnu.org/copyleft/fdl.html">GNU Free Documentation License 1.3 or later</a> unless otherwise noted.</li>
							</ul>
						<ul id="footer-places">
								<li id="footer-places-privacy"><a href="/index.php/ArchWiki:Privacy_policy" class="mw-redirect" title="ArchWiki:Privacy policy">Privacy policy</a></li>
								<li id="footer-places-about"><a href="/index.php/ArchWiki:About" title="ArchWiki:About">About ArchWiki</a></li>
								<li id="footer-places-disclaimer"><a href="/index.php/ArchWiki:General_disclaimer" title="ArchWiki:General disclaimer">Disclaimers</a></li>
							</ul>
										<ul id="footer-icons" class="noprint">
										<li id="footer-copyrightico">
											</li>
									</ul>
						<div style="clear: both;"></div>
		</div>
		<script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.107","walltime":"0.112","ppvisitednodes":{"value":1120,"limit":1000000},"ppgeneratednodes":{"value":3373,"limit":1000000},"postexpandincludesize":{"value":12846,"limit":2097152},"templateargumentsize":{"value":7582,"limit":2097152},"expansiondepth":{"value":5,"limit":40},"expensivefunctioncount":{"value":0,"limit":100},"unstrip-depth":{"value":0,"limit":20},"unstrip-size":{"value":38,"limit":5000000},"timingprofile":["100.00%   41.692      1 -total"," 23.69%    9.878     90 Template:Ic"," 11.59%    4.834      5 Template:App","  7.74%    3.228      1 Template:Accuracy","  7.38%    3.077      8 Template:Note","  4.94%    2.059      8 Template:Pkg","  4.74%    1.975      2 Template:Warning","  4.50%    1.875      1 Template:Man","  4.46%    1.861      2 Template:Tip","  4.42%    1.842      1 Template:Related_articles_start"]},"cachereport":{"timestamp":"20181224115339","ttl":86400,"transientcontent":false}}});});</script><script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":46});});</script>
	</body>
</html>
