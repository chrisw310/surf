<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>Wayland st!!??</title>
	<link rel="stylesheet" type="text/css" href="https://narkive.com/s/style.us.4.min.css" />

	<script type="text/javascript">var nk = {conf: {logged_in: false, csrf: '', thread_hash: 'w9NP8w1W'}};</script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js" type="text/javascript" ></script>
	<script src="https://narkive.com/s/script.en.min.js" type="text/javascript" ></script>
	
			
	<script type="text/javascript">
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        
        ga('create', 'UA-4696456-11', 'auto');
        ga('set', 'dimension1', 'en');
        ga('set', 'dimension2', 'no');
        ga('set', 'dimension3', 'yes');
        ga('set', 'dimension4', 'mailinglist');
        ga('require', 'displayfeatures');
        ga('send', 'pageview');
        	</script>
			<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
</head>
<body>


<div id="page_wrapper">
    <div id="header">
        <a href="https://narkive.com/" id="logo">
            <div style="display: none;" id="logo_desc_ng"></div>
            <div id="logo_desc_ml"></div>
        </a>
        
        
        
        		<a id="nav" href="https://dev.suckless.narkive.com/">
            	dev@suckless.org        </a>
		                <div style="float: left; position: relative;">
            <input type="text" placeholder="Searchâ€¦"  tabindex="1" autocomplete="off" name="search_query" id="top_search" />
            <div id="top_search_res_container" style="display: none;"></div>
        </div>
                <!--<a href="https://narkive.com/user/profile_edit" id="header_user"></a>
        <a href="https://narkive.com/user/profile_settings" id="header_gear"></a>-->
    </div>
<div id="page_container" class="thread">



<script type="text/javascript">
    var adsense_dispatcher_id = 34;
    var adsense_channel_id = '6182461756';
</script>











<div id="thread_container">

	<div id="thread_lister_ctrl">
	    <div style="display: table-cell;">
    	    <div id="thread_lister_subtitle">Discussion:</div>
    		<div id="thread_lister_ctrl_nav">
    			Wayland st!!??    		</div>
		</div>
		<div id="thread_lister_opt">
							(too old to reply)
					</div>
	</div>
	
	
		<div  class="post" id="post1">
	<div class="post_header">
		<div hash="a0fe5c2f93ac2fe3" class="post_header_poster">
			Carlos Torres		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-07-27T18:17:42+00:00">2013-07-27 18:17:42 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.1" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		I didn't know about this<br /><br />http://www.phoronix.com/scan.php?page=news_item&amp;px=MTQyMTQ<br /><br />I'm both excited or looking to troll<br />
	</div>
</div>









<div class="post_wrapper"><div  class="post" id="post2">
	<div class="post_header">
		<div hash="7d095739b10bed41" class="post_header_poster">
			Michael Forney		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-07-28T05:43:00+00:00">2013-07-28 05:43:00 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.2" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

<div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post1"><i>Post by Carlos Torres</i></a><br />I didn't know about this<br />http://www.phoronix.com/scan.php?page=news_item&amp;px=MTQyMTQ<br />I'm both excited or looking to troll<br /></div>I'm the author of the port. I'm not sure how the suckless community<br />feels about Wayland, but it seems like the core protocol is fairly<br />lightweight, depends only on libffi, and is refreshing to work with<br />compared to X. Weston's goals are perhaps more orthogonal to suckless,<br />but I think there is potential for a suckless compositor.<br /><br />I don't really expect there to be a suckless Wayland environment for a<br />while, and maybe something better will come around before there is, but<br />I think my rendering library could be useful in either case (the Wayland<br />part is just buffer creation/management and is separate from the<br />rendering part).<br /><div class="post_signature">--<br />Michael Forney &lt;***@mforney.org&gt;<br /></div>
	</div>
</div>
</div>








<div class="post_wrapper"><div class="post_wrapper"><div  class="post" id="post3">
	<div class="post_header">
		<div hash="a0fe5c2f93ac2fe3" class="post_header_poster">
			Carlos Torres		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-07-28T13:33:48+00:00">2013-07-28 13:33:48 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.3" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

Hi Michael.<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post2"><i>Post by Michael Forney</i></a><br /><div class="quoted_post quoted_post_level_2" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post1"><i>Post by Carlos Torres</i></a><br />I didn't know about this<br />http://www.phoronix.com/scan.php?page=news_item&amp;px=MTQyMTQ<br />I'm both excited or looking to troll<br /></div>I'm the author of the port.<br /></div>I'm glad you were the first to answer, Kudos. wayland needs more<br />suckless.  Keep on it and ignore the negative commentary. :-)<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post2"><i>Post by Michael Forney</i></a><br />I'm not sure how the suckless community<br />feels about Wayland, but it seems like the core protocol is fairly<br />lightweight, depends only on libffi, and is refreshing to work with<br />compared to X.<br /></div>you'll get varied reactions on the list.  I for one am happy to see<br />the mingling between wayland and suckless stuff, since it potentially<br />exposes the suckless philosophy, whatever it may be.<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post2"><i>Post by Michael Forney</i></a><br />Weston's goals are perhaps more orthogonal to suckless,<br />but I think there is potential for a suckless compositor.<br />I don't really expect there to be a suckless Wayland environment for a<br />while, and maybe something better will come around before there is, but<br />I think my rendering library could be useful in either case (the Wayland<br />part is just buffer creation/management and is separate from the<br />rendering part).<br />--<br /></div>Thanks<br />--Carlos<br />
	</div>
</div>
</div></div>








<div class="post_wrapper"><div class="post_wrapper"><div  class="post" id="post4">
	<div class="post_header">
		<div hash="eb7c250b5fa24f72" class="post_header_poster">
			oneofthem		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-07-29T06:15:59+00:00">2013-07-29 06:15:59 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.4" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

<div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post2"><i>Post by Michael Forney</i></a><br /><div class="quoted_post quoted_post_level_2" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post1"><i>Post by Carlos Torres</i></a><br />I didn't know about this<br />http://www.phoronix.com/scan.php?page=news_item&amp;px=MTQyMTQ<br />I'm both excited or looking to troll<br /></div>I'm the author of the port. I'm not sure how the suckless community<br />feels about Wayland, but it seems like the core protocol is fairly<br />lightweight, depends only on libffi, and is refreshing to work with<br />compared to X. Weston's goals are perhaps more orthogonal to suckless,<br />but I think there is potential for a suckless compositor.<br /></div>I'd rather use dwm + wayland than dwm + xorg.<br />
	</div>
</div>
</div></div>








<div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div  class="post" id="post5">
	<div class="post_header">
		<div hash="0549dcda5d09e73d" class="post_header_poster">
			Silvan Jegen		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-07-29T07:59:06+00:00">2013-07-29 07:59:06 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.5" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

<div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post4"><i>Post by oneofthem</i></a><br /><div class="quoted_post quoted_post_level_2" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post2"><i>Post by Michael Forney</i></a><br /><div class="quoted_post quoted_post_level_3" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post1"><i>Post by Carlos Torres</i></a><br />I didn't know about this<br />http://www.phoronix.com/scan.php?page=news_item&amp;px=MTQyMTQ<br />I'm both excited or looking to troll<br /></div>I'm the author of the port. I'm not sure how the suckless community<br />feels about Wayland, but it seems like the core protocol is fairly<br />lightweight, depends only on libffi, and is refreshing to work with<br />compared to X. Weston's goals are perhaps more orthogonal to suckless,<br />but I think there is potential for a suckless compositor.<br /></div>I'd rather use dwm + wayland than dwm + xorg.<br /></div>I am very interested in st (as well as other suckless projects)<br />on weston/wayland as well.<br /><br />The wayland protocol seems to be very concise and it certainly does not<br />come with all of the legacy baggage of X. That said, I noticed that the<br />wayland port of the st code is around 70 lines longer than the X<br />version[1]. I have not investigated way that is though.<br /><br />As far as I know dwm would have to be ported as a wayland-compositor<br />(which does not do any composing). Does anyone know of a<br />dwm-port/suckless-compositor for the wayland protocol that is still<br />being actively developed?<br /><br /><br />[1] https://github.com/michaelforney/st/blob/wayland/st.c (wayland<br />vs. master branch)<br />
	</div>
</div>
</div></div></div>








<div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div  class="post" id="post6">
	<div class="post_header">
		<div hash="7d095739b10bed41" class="post_header_poster">
			Michael Forney		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-07-29T10:08:44+00:00">2013-07-29 10:08:44 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.6" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

<div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post5"><i>Post by Silvan Jegen</i></a><br />I am very interested in st (as well as other suckless projects)<br />on weston/wayland as well.<br />The wayland protocol seems to be very concise and it certainly does not<br />come with all of the legacy baggage of X. That said, I noticed that the<br />wayland port of the st code is around 70 lines longer than the X<br />version[1]. I have not investigated way that is though.<br /></div>It's mostly because of the many event handlers. In Wayland, you don't<br />have to register listeners for objects, but if you do, you have to<br />implement all of it's events. Mostly this is okay, but in a few places,<br />there were some events that I didn't use, like the drag and drop<br />facilities in wl_data_device. Also, Wayland uses separate events for<br />button/key press/release as well as axis (which required a new axis<br />binding shortcut list in config.h and handling in st.c).<br /><br />These little changes add up (function prototypes as well as<br />definitions), which account for the difference in code size. However,<br />nearly all of this is cosmetic and doesn't really affect the code's<br />complexity.<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post5"><i>Post by Silvan Jegen</i></a><br />As far as I know dwm would have to be ported as a wayland-compositor<br />(which does not do any composing). Does anyone know of a<br />dwm-port/suckless-compositor for the wayland protocol that is still<br />being actively developed?<br /></div>Making dwm act as a Wayland shell (what Wayland calls a window manager),<br />wouldn't be too difficult. Many of the X11 related bits correspond<br />fairly closely to wl_shell bits, and the ones that don't probably aren't<br />even necessary under Wayland.<br /><br />However, the compositor part is tricky. The easiest method would be to<br />make dwm a shell plugin for Weston. I don't like this approach because<br />Weston seems to be focusing on a more "modern" desktop features like<br />animation, transparency, window decorations, etc. I also dislike the<br />idea of dwm being loaded as a plugin.<br /><br />I don't think that implementing a compositor from scratch (which would<br />do nothing more than blit the windows onto your screen, and maybe draw<br />some borders) is out of the question. I'm estimating that it could be<br />done in ~4000 lines (maybe more, maybe less). The question in this<br />scenario is where does the window manager fit in? I don't like the idea<br />of the window manager being in the same project as the compositor, as<br />they do two different jobs and other window managers should be able to<br />make use of it as well.<br /><br />However, there has to be some implementation of wl_shell on the<br />compositor side. One solution would be to make a protocol extension<br />(which are really easy to do) and use it to communicate with a separate<br />window manager process. This would be similar to how an X window manager<br />works, but it would require implementing a wl_shell that kind of acts as<br />a proxy. Another option would be to make the compositor into a library<br />that a window manager can link with. The wl_shell implementation would<br />be more direct but then we would have to deal with giving the window<br />manager/compositor special privileges (Weston does this by using a suid<br />launcher which does stuff like open input devices and manage drm master<br />through a socket pair). Another problem is that we would have a single<br />program which does quite a lot of stuff.<br /><br />I'd love to hear other people's opinions on this topic.<br /><div class="post_signature">--<br />Michael Forney &lt;***@mforney.org&gt;<br /></div>
	</div>
</div>
</div></div></div></div>








<div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div  class="post" id="post7">
	<div class="post_header">
		<div hash="0549dcda5d09e73d" class="post_header_poster">
			Silvan Jegen		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-07-29T10:47:49+00:00">2013-07-29 10:47:49 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.7" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

<div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post6"><i>Post by Michael Forney</i></a><br /><div class="quoted_post quoted_post_level_2" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post5"><i>Post by Silvan Jegen</i></a><br />I am very interested in st (as well as other suckless projects)<br />on weston/wayland as well.<br />The wayland protocol seems to be very concise and it certainly does not<br />come with all of the legacy baggage of X. That said, I noticed that the<br />wayland port of the st code is around 70 lines longer than the X<br />version[1]. I have not investigated way that is though.<br /></div>It's mostly because of the many event handlers. In Wayland, you don't<br />have to register listeners for objects, but if you do, you have to<br />implement all of it's events. Mostly this is okay, but in a few places,<br />there were some events that I didn't use, like the drag and drop<br />facilities in wl_data_device. Also, Wayland uses separate events for<br />button/key press/release as well as axis (which required a new axis<br />binding shortcut list in config.h and handling in st.c).<br />These little changes add up (function prototypes as well as<br />definitions), which account for the difference in code size. However,<br />nearly all of this is cosmetic and doesn't really affect the code's<br />complexity.<br /></div>First of all, thanks a lot for these explanations!<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post6"><i>Post by Michael Forney</i></a><br /><div class="quoted_post quoted_post_level_2" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post5"><i>Post by Silvan Jegen</i></a><br />As far as I know dwm would have to be ported as a wayland-compositor<br />(which does not do any composing). Does anyone know of a<br />dwm-port/suckless-compositor for the wayland protocol that is still<br />being actively developed?<br /></div>Making dwm act as a Wayland shell (what Wayland calls a window manager),<br />wouldn't be too difficult. Many of the X11 related bits correspond<br />fairly closely to wl_shell bits, and the ones that don't probably aren't<br />even necessary under Wayland.<br />However, the compositor part is tricky. The easiest method would be to<br />make dwm a shell plugin for Weston. I don't like this approach because<br />Weston seems to be focusing on a more "modern" desktop features like<br />animation, transparency, window decorations, etc. I also dislike the<br />idea of dwm being loaded as a plugin.<br /></div>So the reason you would not want dwm to be a shell plugin for Weston is<br />that Weston is too focused on fancy modern features, correct?<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post6"><i>Post by Michael Forney</i></a><br />I don't think that implementing a compositor from scratch (which would<br />do nothing more than blit the windows onto your screen, and maybe draw<br />some borders) is out of the question. I'm estimating that it could be<br />done in ~4000 lines (maybe more, maybe less). The question in this<br />scenario is where does the window manager fit in? I don't like the idea<br />of the window manager being in the same project as the compositor, as<br />they do two different jobs and other window managers should be able to<br />make use of it as well.<br /></div>It sounds to me like implementing a simple blitting compositor from<br />scratch would be useful not only for the suckless projects, but other<br />people not caring about those "modern" compositing features you<br />mentioned as well.<br /><br />If there was such a simple blitting compositor, one could then write dwm<br />as a shell plugin for it. That way one could retain some modularity while<br />not having to use any of these modern features of Weston.<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post6"><i>Post by Michael Forney</i></a><br />However, there has to be some implementation of wl_shell on the<br />compositor side. One solution would be to make a protocol extension<br />(which are really easy to do) and use it to communicate with a separate<br />window manager process. This would be similar to how an X window manager<br />works, but it would require implementing a wl_shell that kind of acts as<br />a proxy. Another option would be to make the compositor into a library<br />that a window manager can link with. The wl_shell implementation would<br />be more direct but then we would have to deal with giving the window<br />manager/compositor special privileges (Weston does this by using a suid<br />launcher which does stuff like open input devices and manage drm master<br />through a socket pair). Another problem is that we would have a single<br />program which does quite a lot of stuff.<br /></div>Implementing a proxy wl_shell for this hypothetical blitting compositor<br />and having dwm as a separate process communicating with it would be<br />another possible approach.<br /><br />Please note that I have no idea how difficult it would be to implement<br />a blitting wayland compositor in ~4000 lines of code.<br />
	</div>
</div>
</div></div></div></div></div>








<div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div  class="post" id="post8">
	<div class="post_header">
		<div hash="7d095739b10bed41" class="post_header_poster">
			Michael Forney		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-07-29T11:35:53+00:00">2013-07-29 11:35:53 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.8" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

<div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post7"><i>Post by Silvan Jegen</i></a><br />So the reason you would not want dwm to be a shell plugin for Weston is<br />that Weston is too focused on fancy modern features, correct?<br /></div>Eh, maybe I am being a bit too hard on Weston. It just seems to be<br />growing quite steadily which scares me and I wasn't thrilled with it<br />overall.<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post7"><i>Post by Silvan Jegen</i></a><br />Implementing a proxy wl_shell for this hypothetical blitting compositor<br />and having dwm as a separate process communicating with it would be<br />another possible approach.<br /></div>Yeah, that's what I tried to describe.<br /><div class="post_signature">--<br />Michael Forney &lt;***@mforney.org&gt;<br /></div>
	</div>
</div>
</div></div></div></div></div></div>








<div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div  class="post" id="post9">
	<div class="post_header">
		<div hash="4501344e150ec042" class="post_header_poster">
			Anselm R Garbe		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-08-02T20:47:01+00:00">2013-08-02 20:47:01 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.9" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

Hi there,<br /><div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post8"><i>Post by Michael Forney</i></a><br /><div class="quoted_post quoted_post_level_2" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post7"><i>Post by Silvan Jegen</i></a><br />So the reason you would not want dwm to be a shell plugin for Weston is<br />that Weston is too focused on fancy modern features, correct?<br /></div>Eh, maybe I am being a bit too hard on Weston. It just seems to be<br />growing quite steadily which scares me and I wasn't thrilled with it<br />overall.<br /><div class="quoted_post quoted_post_level_2" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post7"><i>Post by Silvan Jegen</i></a><br />Implementing a proxy wl_shell for this hypothetical blitting compositor<br />and having dwm as a separate process communicating with it would be<br />another possible approach.<br /></div>Yeah, that's what I tried to describe.<br /></div>I consider putting something like this on my TODO list for *after* the<br />sta.li release...<br /><br />Best regards,<br />Anselm<br />
	</div>
</div>
</div></div></div></div></div></div></div>








<div class="post_wrapper"><div class="post_wrapper"><div  class="post" id="post10">
	<div class="post_header">
		<div hash="5617c84b60dae253" class="post_header_poster">
			Roberto E. Vargas Caballero		</div>
		<div class="post_header_date">
			<span class="timeago" title="2013-08-06T07:04:25+00:00">2013-08-06 07:04:25 UTC</span>
		</div>
		
	</div>
	<div class="post_body parsed">
		<div class="post_actions"><a href="https://narkive.com/w9NP8w1W.10" style="border: 0;" class="post_actions_bit" rel="nofollow">Permalink</a><!--<div  
class="post_actions_bit post_actions_bit_action_raw">Raw Message</div><div style="border: 0;" class="post_actions_bit post_actions_bit_action_report">Report</div>--></div>
	
    






    
		

<div class="quoted_post quoted_post_level_1" ><a href="https://dev.suckless.narkive.com/w9NP8w1W/wayland-st#post2"><i>Post by Michael Forney</i></a><br />I'm the author of the port. I'm not sure how the suckless community<br />feels about Wayland, but it seems like the core protocol is fairly<br />lightweight, depends only on libffi, and is refreshing to work with<br />compared to X. Weston's goals are perhaps more orthogonal to suckless,<br />but I think there is potential for a suckless compositor.<br /></div>Your port seems very interesting, but it is a big modification to st,<br />which makes difficult any merge from master branch. I don't know<br />the opinion of other st developers, but I think could be a good option<br />factorize the code and allow different display codes.<br /><div class="post_signature">--<br />Roberto E. Vargas Caballero<br />----------------------------<br />***@shike2.com<br />http://www.shike2.com<br /></div>	</div>
</div>
</div></div>








		


	 	 
		
		<script type="text/javascript">
    		$(document).ready(function() {
    		    $.ajax({
    		  			url: "https://" + document.domain +"/ajax/threadviewcounter?hash=w9NP8w1W",
    		  			cache: true,
    		  			type: "GET"
    			});
            });
		</script>











</div>

<div id="sidebar_container">

9 Replies<br />
277 Views
<br />

<span class="sidebar_container_inner">
Switch to linear view 
<br />
<a href="?parse=disable">Disable enhanced parsing</a>
<br />
<a href="https://narkive.com/w9NP8w1W" rel="nofollow">Permalink to this page</a>


</span>





<br /><br />



<div id="thread_navigation">
Thread Navigation<div style="margin-top: 8px;"></div>
<a href="#post1" style="width: 220px;" class="nav_post" id="nav_post1" >
	<div class="post_header">
		<span title="v***@gmail.com" class="post_header_poster">
			Carlos Torres		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-07-27T18:17:42+00:00">2013-07-27 18:17:42 UTC</span>
		</span>
		
	</div>
</a>
<div class="post_wrapper"><a href="#post2" style="width: 218px;" class="nav_post" id="nav_post2" >
	<div class="post_header">
		<span title="m***@mforney.org" class="post_header_poster">
			Michael Forney		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-07-28T05:43:00+00:00">2013-07-28 05:43:00 UTC</span>
		</span>
		
	</div>
</a>
</div><div class="post_wrapper"><div class="post_wrapper"><a href="#post3" style="width: 216px;" class="nav_post" id="nav_post3" >
	<div class="post_header">
		<span title="v***@gmail.com" class="post_header_poster">
			Carlos Torres		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-07-28T13:33:48+00:00">2013-07-28 13:33:48 UTC</span>
		</span>
		
	</div>
</a>
</div></div><div class="post_wrapper"><div class="post_wrapper"><a href="#post4" style="width: 216px;" class="nav_post" id="nav_post4" >
	<div class="post_header">
		<span title="o***@lavabit.com" class="post_header_poster">
			oneofthem		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-07-29T06:15:59+00:00">2013-07-29 06:15:59 UTC</span>
		</span>
		
	</div>
</a>
</div></div><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><a href="#post5" style="width: 214px;" class="nav_post" id="nav_post5" >
	<div class="post_header">
		<span title="s***@gmail.com" class="post_header_poster">
			Silvan Jegen		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-07-29T07:59:06+00:00">2013-07-29 07:59:06 UTC</span>
		</span>
		
	</div>
</a>
</div></div></div><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><a href="#post6" style="width: 212px;" class="nav_post" id="nav_post6" >
	<div class="post_header">
		<span title="m***@mforney.org" class="post_header_poster">
			Michael Forney		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-07-29T10:08:44+00:00">2013-07-29 10:08:44 UTC</span>
		</span>
		
	</div>
</a>
</div></div></div></div><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><a href="#post7" style="width: 210px;" class="nav_post" id="nav_post7" >
	<div class="post_header">
		<span title="s***@gmail.com" class="post_header_poster">
			Silvan Jegen		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-07-29T10:47:49+00:00">2013-07-29 10:47:49 UTC</span>
		</span>
		
	</div>
</a>
</div></div></div></div></div><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><a href="#post8" style="width: 208px;" class="nav_post" id="nav_post8" >
	<div class="post_header">
		<span title="m***@mforney.org" class="post_header_poster">
			Michael Forney		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-07-29T11:35:53+00:00">2013-07-29 11:35:53 UTC</span>
		</span>
		
	</div>
</a>
</div></div></div></div></div></div><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><div class="post_wrapper"><a href="#post9" style="width: 206px;" class="nav_post" id="nav_post9" >
	<div class="post_header">
		<span title="g***@gmail.com" class="post_header_poster">
			Anselm R Garbe		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-08-02T20:47:01+00:00">2013-08-02 20:47:01 UTC</span>
		</span>
		
	</div>
</a>
</div></div></div></div></div></div></div><div class="post_wrapper"><div class="post_wrapper"><a href="#post10" style="width: 216px;" class="nav_post" id="nav_post10"  style="border-bottom: 1px dashed #8FF1FF;">
	<div class="post_header">
		<span title="k***@shike2.com" class="post_header_poster">
			Roberto E. Vargas Caballero		</span>
		<span class="post_header_date">
			<span class="timeago" title="2013-08-06T07:04:25+00:00">2013-08-06 07:04:25 UTC</span>
		</span>
		
	</div>
</a>
</div></div> 
</div>








        


</div>









<div style="clear: both"></div>

</div>
<script type="text/javascript">

var nav_highlighted = false,
    sidebar_fixed = false,
    sidebar_initial_top_distance = 0,
    sidebar_initial_left_distance = 0,
    last_post_divs_distance_build = 0,
    post_divs_distances = Array(),
    sidebar_height = 0,
    thread_navigation_height = 0,
    sidebar_position_offset = 0,
    thread_onscroll_timeout = 0,
    sidebar_related_height = 0;

function build_post_divs_distance()
{
    if(new Date().getTime() - last_post_divs_distance_build < 1000)
    {
        return;
    }

    var post_divs = $('.post');

    for(k in post_divs)
    {
        if(parseInt(k) != k)
            continue;
        post_divs_distances[$(post_divs[k]).position().top] = $(post_divs[k]).attr('id').replace('post', '');
    }
    sidebar_height = $('#sidebar_container').height();
    thread_navigation_height = $('#thread_navigation').height();
}


function thread_onscroll()
{
    if($(window).width() < 995)
    {
        return;
    }

    build_post_divs_distance();

    var scroll_top = $(window).scrollTop(),
    sidebar_offset_top = $('#sidebar_container').offset().top,
    windows_height = $(window).height(),
    sidebar_css_top = parseInt($('#sidebar_container').css('top') == 'auto' ? 0 : $('#sidebar_container').css('top')),
    sidebar_standard_top_distance = 20,
    first_visible_post = 1,
    scroller_margins = windows_height < 250 ? 20 : 100;
    highlighted_top_distance = nav_highlighted > 0 ? $('#nav_post' + nav_highlighted).position().top : windows_height/2;

    if(sidebar_initial_left_distance == 0)
    {
        sidebar_initial_left_distance = $('#sidebar_container').offset().left/* == 0 ? 760 : $('#sidebar_container').offset().left*/;
    }

    if(highlighted_top_distance + scroller_margins + sidebar_position_offset + sidebar_related_height > windows_height)
    {
        sidebar_position_offset -= windows_height/2;
        $('#sidebar_container').css('position', 'fixed').css('top', sidebar_position_offset + 'px').css('left', (sidebar_initial_left_distance - 15) + 'px');
    }
    else if(highlighted_top_distance + sidebar_position_offset < scroller_margins)
    {
        sidebar_position_offset += windows_height/2;
        $('#sidebar_container').css('position', 'fixed').css('top', sidebar_position_offset + 'px').css('left', (sidebar_initial_left_distance - 15) + 'px');
    }
    else if(!sidebar_fixed && scroll_top + sidebar_standard_top_distance > sidebar_offset_top)
    {
        $('#sidebar_container').css('position', 'fixed').css('top', '0px').css('left', (sidebar_initial_left_distance - 15) + 'px');
        sidebar_fixed = true;
        sidebar_initial_top_distance = sidebar_offset_top;
    }
    else if(sidebar_fixed && scroll_top + sidebar_standard_top_distance < sidebar_initial_top_distance)
    {
        $('#sidebar_container').css('position', 'relative').css('top', '0').css('left', '0');
        sidebar_fixed = false;
    }

    for(k in post_divs_distances)
        if(k < scroll_top + 100 && post_divs_distances[k] != 'selector')
            first_visible_post = parseInt(post_divs_distances[k]);

    if(first_visible_post > 0 && first_visible_post <= post_divs_distances.length + 1)
    {
        $('#nav_post' + nav_highlighted).css('opacity', '');
        $('#nav_post' + first_visible_post).css('opacity', '1');
        nav_highlighted = first_visible_post;
    }

    clearTimeout(thread_onscroll_timeout);
    thread_onscroll_timeout = setTimeout(function () {thread_onscroll();}, 200);
}

function init_quoted_extra()
{
    $(".quoted_post_level_1").each(function() {
        if($(this).text().length < 500)
            return;

        if($(this).next('.quoted_extra_clickable').length != 0)
            return;

        $(this).css('display', 'none');
        $(this).after('<div class="quoted_extra_clickable">...</div>');
    });
}

function quoted_extra_click(e)
{
    $(e).css('display', 'none');
    $(e).prev().css('display', 'block');

    build_post_divs_distance()
}

function adblock_status(r)
{
    if(!document.addEventListener) {
        return;
    }
    
    if(r == false) {
        ga('send', 'event', 'adblock', 'disabled', {'nonInteraction': 1});
        return;
    }

    ga('send', 'event', 'adblock', 'enabled', {'nonInteraction': 1});

    //return;

    $.get( "https://" + document.domain + "/ajax/banner", function( data ) {
        $( ".adslot_301_c" ).html( data );
        for(var i = 2; i< 5; i++)
            $('.adslot_30' + i + '_c').parent().remove()
    });

}


function thread_check_adv()
{
    if(typeof DetectAdBlock === 'undefined') {
        adblock_status(true);
    } else {
        detectAdBlock.onDetected(function() { adblock_status(true) });
        detectAdBlock.onNotDetected(function() { adblock_status(false) });
    }


//    if(typeof window.google_persistent_state !== 'undefined')
//	    return;
//    $('.ads_post_bit').css('display', 'none');
    }


function thread_selector_mouseup()
{
    
}

function thread_init_selection()
{
    if(!window.location.hash || !window.location.hash.match(/^#selection:([0-9]+)\.([0-9]+)\.([0-9]+)$/))
        return;
    
    var temp = window.location.hash.match(/^#selection:([0-9]+)\.([0-9]+)\.([0-9]+)$/);
    var post = temp[1], start = temp[2], end = parseInt(start) + parseInt(temp[3]), ts, tr;

    tr = $('#post' + post).children('.post_body').html().trim();
    
    ts = '<div>' + $('#post' + post).children('.post_body').html().trim() + '</div>';
    ts = $(ts);
    ts.find('.quoted_post').remove();
    ts.find('.post_signature').remove();
    //ts.find('#selection_url_f').remove();
    ts.find('br').replaceWith(' ');
    ts = ts.html().trim();
    
    var post_verified = '', c;

    for (var i = 0; i < ts.length; i++)
    {
        if(i < start || i >= end)
            continue;
        
        c = ts.charAt(i);
        post_verified += c;
        
        if(c != ' ')
            continue;
        
        if(tr.indexOf(post_verified) != -1)
            continue;
            
        post_verified = post_verified.slice(0, -1);
        
        if(tr.indexOf(post_verified + '<br>') != -1)
        {
            post_verified += '<br>';
            continue;
        }
        
        break;
            
    }
    
    $('#post' + post).children('.post_body').html( $('#post' + post).children('.post_body').html().replace(post_verified, '<span id="init_selection">' + post_verified + '</span>') );
    var offset = (window.innerHeight < $("#init_selection").height()) ? 30 : ((window.innerHeight - $("#init_selection").height()) / 2);
    $('html,body').animate({scrollTop: $("#init_selection").offset().top - offset},'fast');
    
    ga('send', 'event', 'selection', 'load', {'nonInteraction': 1});

}

function thread_init_copy()
{  
  $('#thread_container').on("mouseup", function() {
    var t, te, tr, ts;
    
    if($('#selection_url_c:hover').length > 0)
    {
        $('#selection_url_c input').select();
        ga('send', 'event', 'selection', 'click', {'nonInteraction': 1});
        return;
    }
    
    $('#selection_url_c').remove();
    $('#selection_url_f').remove();
    
    
    if(window.getSelection)
        t = window.getSelection();
    else if(document.getSelection)
        t = document.getSelection();
    else if(document.selection)
        t = document.selection.createRange().text;
    
    if(typeof t === 'undefined' || t.toString().length <= 1)
        return;
        
    if(typeof t.anchorNode === 'undefined' || typeof t.anchorNode.parentElement === 'undefined' || typeof t.anchorNode.parentElement.parentElement === 'undefined')
        return;
    
    te = t.anchorNode.parentElement.parentElement;
    
    if(!te.id.match(/^post[0-9]+$/))
        return;
    
    tr = t.toString().replace(/\n/g, ' ').trim();
    ts = '<div>' + $(te).children('.post_body').html().trim() + '</div>';
    ts = $(ts);
    ts.find('.quoted_post').remove();
    ts.find('.post_signature').remove();
    //ts.find('#selection_url_f').remove();
    ts.find('br').replaceWith(' ');
    ts = ts.html().trim();
    
    if(ts.indexOf(tr) == -1)
        return;
        
    var hash = document.location.href.match(/\.narkive\.com\/([a-zA-Z0-9]{8})/);
        if (typeof hash[1] === 'undefined')
            return;
            
    hash = hash[1];
    
    var fix_index = 0;
    
    if(ts.indexOf('init_selection') < ts.indexOf(tr) && ts.indexOf('init_selection') != -1)
        fix_index = 33;
    
    console.log(ts);
    console.log(fix_index);
    
	var url = 'https://narkive.com/' + hash + ':' + te.id.replace('post', '') + '.' + (ts.indexOf(tr) - fix_index) + '.' + tr.length;
	
	setTimeout(function() {
	    try {
    	    var range = document.createRange();
            range.setStart(t.focusNode, t.focusOffset);
    	    range.insertNode($('<span id="selection_url_f"></span>').get(0));
    	    var selection_button = $('<div style="top: ' + $('#selection_url_f').offset().top + 'px" id="selection_url_c">Selection Permalink:<input type="text" value="'+url+'"></div>').get(0);
            $('#thread_container').append(selection_button);  
            console.log(selection_button);
	    }
	    catch (e) {}
    }, 10);

    
    
  });
}

/*
function thread_similarbar(hash)
{
    if(/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent))
        return;
        
    $.get( "https://" + document.domain + "/ajax/similarbar?hash=" + hash, function( data ) {
        $('#thread_navigation').after(data);
    });      
}
*/				

function thread_suggested_reading(hash)
{
    if(/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent))
        return;
        
    $.get( "https://" + document.domain + "/ajax/suggestedreading?hash=" + hash, function( data ) {
        $('#thread_container').append(data);
    });      
}
		

$( window ).scroll(function () { thread_onscroll(); });
$( document ).ready(function() { init_quoted_extra(); thread_onscroll(); thread_check_adv(); thread_init_copy(); thread_init_selection(); });
</script>

<script type="text/javascript">
 /*   thread_similarbar('w9NP8w1W');*/
 /* thread_suggested_reading('w9NP8w1W'); */
 
</script>

<style type="text/css">



</style>

<script type="text/javascript">


 
</script>


<div style="height: 50px"></div>	
</div>

<div id="footer_wrapper">
<div id="footer_links">
<a href="https://narkive.com/about">about</a> - <!--<a href="https://narkive.com/contact">contact</a> - <a style="cursor:pointer;" id="uservoice_button">feedback</a> - --><a href="https://narkive.com/legalese">legalese</a>
</div>

<!--
<div id="lang_selector">
<div id="lang_select">Contents in English</div>

<div id="lang_select_cont">
	<div id="lang_select_cont_in">

	<a href="?set_lang=zh" class="lang_select_bit">Chinese</a><a href="?set_lang=hr" class="lang_select_bit">Croatian</a><a href="?set_lang=cs" class="lang_select_bit">Czech</a><a href="?set_lang=da" class="lang_select_bit">Danish</a><a href="?set_lang=nl" class="lang_select_bit">Dutch</a><a href="?set_lang=en" class="lang_select_bit">English</a><a href="?set_lang=et" class="lang_select_bit">Estonian</a><a href="?set_lang=fi" class="lang_select_bit">Finnish</a><a href="?set_lang=fr" class="lang_select_bit">French</a><a href="?set_lang=de" class="lang_select_bit">German</a><a href="?set_lang=el" class="lang_select_bit">Greek</a><a href="?set_lang=he" class="lang_select_bit">Hebrew</a><a href="?set_lang=hu" class="lang_select_bit">Hungarian</a><a href="?set_lang=it" class="lang_select_bit">Italian</a><a href="?set_lang=ja" class="lang_select_bit">Japanese</a><a href="?set_lang=nb" class="lang_select_bit">Norwegian</a><a href="?set_lang=pl" class="lang_select_bit">Polish</a><a href="?set_lang=pt" class="lang_select_bit">Portuguese</a><a href="?set_lang=ru" class="lang_select_bit">Russian</a><a href="?set_lang=sr" class="lang_select_bit">Serbian</a><a href="?set_lang=es" class="lang_select_bit">Spanish</a><a href="?set_lang=sv" class="lang_select_bit">Swedish</a><a href="?set_lang=tr" class="lang_select_bit" style="border-bottom: none;">Turkish</a>	
	</div>
	
	<div id="lang_select_cont_end"></div>
	
</div>




</div>
-->



</div>
<div id="ajax_loading">Loading...</div>

<div id="overflow"></div>

<div id="overflow_message">
	<div id="overflow_message_header">
	</div>
	<div id="overflow_message_content">
	</div>
	<div id="overflow_message_actions">
	</div>
</div>
</body></html>

